// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	model "github.com/softplan/tenkai-api/pkg/dbms/model"
	mock "github.com/stretchr/testify/mock"
)

// RequestDeploymentDAOInterface is an autogenerated mock type for the RequestDeploymentDAOInterface type
type RequestDeploymentDAOInterface struct {
	mock.Mock
}

// CheckIfRequestHasEnded provides a mock function with given fields: id
func (_m *RequestDeploymentDAOInterface) CheckIfRequestHasEnded(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountRequestDeployments provides a mock function with given fields: startDate, endDate, environmentID, userID
func (_m *RequestDeploymentDAOInterface) CountRequestDeployments(startDate string, endDate string, environmentID string, userID string) (int64, error) {
	ret := _m.Called(startDate, endDate, environmentID, userID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string, string, string) int64); ok {
		r0 = rf(startDate, endDate, environmentID, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(startDate, endDate, environmentID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRequestDeployment provides a mock function with given fields: deployment
func (_m *RequestDeploymentDAOInterface) CreateRequestDeployment(deployment model.RequestDeployment) (int, error) {
	ret := _m.Called(deployment)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.RequestDeployment) int); ok {
		r0 = rf(deployment)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.RequestDeployment) error); ok {
		r1 = rf(deployment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditRequestDeployment provides a mock function with given fields: rd
func (_m *RequestDeploymentDAOInterface) EditRequestDeployment(rd model.RequestDeployment) error {
	ret := _m.Called(rd)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.RequestDeployment) error); ok {
		r0 = rf(rd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRequestDeploymentByID provides a mock function with given fields: id
func (_m *RequestDeploymentDAOInterface) GetRequestDeploymentByID(id int) (model.RequestDeployment, error) {
	ret := _m.Called(id)

	var r0 model.RequestDeployment
	if rf, ok := ret.Get(0).(func(int) model.RequestDeployment); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.RequestDeployment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasErrorInRequest provides a mock function with given fields: id
func (_m *RequestDeploymentDAOInterface) HasErrorInRequest(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRequestDeployments provides a mock function with given fields: startDate, endDate, environmentID, userID, id, pageNumber, pageSize
func (_m *RequestDeploymentDAOInterface) ListRequestDeployments(startDate string, endDate string, environmentID string, userID string, id int, pageNumber int, pageSize int) ([]model.RequestDeployments, error) {
	ret := _m.Called(startDate, endDate, environmentID, userID, id, pageNumber, pageSize)

	var r0 []model.RequestDeployments
	if rf, ok := ret.Get(0).(func(string, string, string, string, int, int, int) []model.RequestDeployments); ok {
		r0 = rf(startDate, endDate, environmentID, userID, id, pageNumber, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.RequestDeployments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, int, int, int) error); ok {
		r1 = rf(startDate, endDate, environmentID, userID, id, pageNumber, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
