// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model2 "github.com/softplan/tenkai-api/pkg/dbms/model"
	"github.com/stretchr/testify/mock"
)

// DependencyDAOInterface is an autogenerated mock type for the DependencyDAOInterface type
type DependencyDAOInterface struct {
	mock.Mock
}

// CreateDependency provides a mock function with given fields: dependency
func (_m *DependencyDAOInterface) CreateDependency(dependency model2.Dependency) error {
	ret := _m.Called(dependency)

	var r0 error
	if rf, ok := ret.Get(0).(func(model2.Dependency) error); ok {
		r0 = rf(dependency)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDependency provides a mock function with given fields: id
func (_m *DependencyDAOInterface) DeleteDependency(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDependencies provides a mock function with given fields: chartName, tag
func (_m *DependencyDAOInterface) GetDependencies(chartName string, tag string) ([]model2.Dependency, error) {
	ret := _m.Called(chartName, tag)

	var r0 []model2.Dependency
	if rf, ok := ret.Get(0).(func(string, string) []model2.Dependency); ok {
		r0 = rf(chartName, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model2.Dependency)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(chartName, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDependencies provides a mock function with given fields: releaseID
func (_m *DependencyDAOInterface) ListDependencies(releaseID int) ([]model2.Dependency, error) {
	ret := _m.Called(releaseID)

	var r0 []model2.Dependency
	if rf, ok := ret.Get(0).(func(int) []model2.Dependency); ok {
		r0 = rf(releaseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model2.Dependency)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(releaseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
