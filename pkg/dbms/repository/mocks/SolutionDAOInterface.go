// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model2 "github.com/softplan/tenkai-api/pkg/dbms/model"
	"github.com/stretchr/testify/mock"
)

// SolutionDAOInterface is an autogenerated mock type for the SolutionDAOInterface type
type SolutionDAOInterface struct {
	mock.Mock
}

// CreateSolution provides a mock function with given fields: solution
func (_m *SolutionDAOInterface) CreateSolution(solution model2.Solution) (int, error) {
	ret := _m.Called(solution)

	var r0 int
	if rf, ok := ret.Get(0).(func(model2.Solution) int); ok {
		r0 = rf(solution)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model2.Solution) error); ok {
		r1 = rf(solution)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSolution provides a mock function with given fields: id
func (_m *SolutionDAOInterface) DeleteSolution(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditSolution provides a mock function with given fields: solution
func (_m *SolutionDAOInterface) EditSolution(solution model2.Solution) error {
	ret := _m.Called(solution)

	var r0 error
	if rf, ok := ret.Get(0).(func(model2.Solution) error); ok {
		r0 = rf(solution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSolutions provides a mock function with given fields:
func (_m *SolutionDAOInterface) ListSolutions() ([]model2.Solution, error) {
	ret := _m.Called()

	var r0 []model2.Solution
	if rf, ok := ret.Get(0).(func() []model2.Solution); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model2.Solution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
