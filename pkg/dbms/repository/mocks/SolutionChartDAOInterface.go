// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model2 "github.com/softplan/tenkai-api/pkg/dbms/model"
	"github.com/stretchr/testify/mock"
)

// SolutionChartDAOInterface is an autogenerated mock type for the SolutionChartDAOInterface type
type SolutionChartDAOInterface struct {
	mock.Mock
}

// CreateSolutionChart provides a mock function with given fields: element
func (_m *SolutionChartDAOInterface) CreateSolutionChart(element model2.SolutionChart) error {
	ret := _m.Called(element)

	var r0 error
	if rf, ok := ret.Get(0).(func(model2.SolutionChart) error); ok {
		r0 = rf(element)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSolutionChart provides a mock function with given fields: id
func (_m *SolutionChartDAOInterface) DeleteSolutionChart(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSolutionChart provides a mock function with given fields: id
func (_m *SolutionChartDAOInterface) ListSolutionChart(id int) ([]model2.SolutionChart, error) {
	ret := _m.Called(id)

	var r0 []model2.SolutionChart
	if rf, ok := ret.Get(0).(func(int) []model2.SolutionChart); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model2.SolutionChart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
